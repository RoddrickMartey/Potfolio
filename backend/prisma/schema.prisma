generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Define the data model for the User
model User {
  id          Int      @id @default(autoincrement())
  name        String
  username    String
  password    String
  email       String   @unique
  phoneNumbers PhoneNumber[]  // One-to-many relationship with PhoneNumber
  skills      Skill[]         // One-to-many relationship with Skill
  resume      String
  bio         String  @db.Text
  socialLinks SocialLink[] // One-to-many for social media links
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Define the data model for the Project
model Project {
  id          Int         @id @default(autoincrement())
  title       String
  description String
  category    ProjectCategory
  techStacks  TechStack[] @relation("ProjectTechStacks")
  link        String
  screenshots Screenshot[] // One-to-many relationship with screenshots
  comments    Comment[]    // One-to-many relationship with comments
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// Define the data model for the Screenshot
model Screenshot {
  id        Int      @id @default(autoincrement())
  url       String   // URL of the uploaded image
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define the data model for the Comment
model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  projectId Int
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define the data model for the TechStack
model TechStack {
  id        Int        @id @default(autoincrement())
  category  TechCategory     // The category like "Frontend", "Backend", "Office Skills"
  skill     String     // The actual skill or technology name like "React", "Express", "PowerPoint"
  projects  Project[]  @relation("ProjectTechStacks")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// Define the data model for the PhoneNumber
model PhoneNumber {
  id        Int      @id @default(autoincrement())
  number    Int      @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define the data model for the Skill
model Skill {
  id        Int      @id @default(autoincrement())
  skill     String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define the data model for the Visitor
model Visitor {
  id         Int      @id @default(autoincrement())
  token      String   @unique  // JWT token to track unique visits
  userAgent  String   // Store the user agent (browser info)
  ipAddress  String   // Store the IP address of the visitor
  visitDate  DateTime @default(now()) // The date of the visit
}

// Define the data model for the SocialLink
model SocialLink {
  id        Int      @id @default(autoincrement())
  platform  String   // e.g., GitHub, LinkedIn
  url       String   // e.g., https://github.com/username
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Define the data model for the DownloadLog
model DownloadLog {
  id            Int      @id @default(autoincrement())
  fileUrl       String   // the file that was downloaded
  ipAddress     String
  userAgent     String
  downloadedAt  DateTime @default(now())
}

enum TechCategory {
  FRONTEND
  BACKEND
  DATABASE
  DEVOPS
  MOBILE
  TOOLS
  TESTING
  DESIGN
  OFFICE
  OTHER
}

enum ProjectCategory {
  PERSONAL
  CLIENT
  SCHOOL
  WORK
  HACKATHON
  OPEN_SOURCE
  FREELANCE
  OTHER
}

